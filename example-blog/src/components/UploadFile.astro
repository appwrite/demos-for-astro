---
interface Props {
  postId?: string;
  bannerId?: any;
  imageUrl?: string;
}
const { postId, imageUrl } = Astro.props;
---

<appwrite-upload-file data-postid={postId} data-imageurl={imageUrl}>
  <input type="file" id="fileElem" accept="image/*" style="display:none" />
  <div
    class="box is-border-dashed is-no-shadow u-padding-24"
    style="--box-border-radius:var(--border-radius-xsmall);"
  >
    <div class="upload-file-box">
      <div class="upload-file-box-image" id="upload-image-icon">
        <span class="icon-upload" aria-hidden="true"></span>
      </div>
      <div class="u-min-width-0 u-text-center">
        <h5 class="upload-file-box-title heading-level-7 u-inline">
          <span class="is-only-desktop">Drag and drop files here to upload</span
          >
          <span class="is-not-desktop">Upload a File</span>
        </h5>
      </div>
      <div
        class="u-flex u-main-center u-cross-center u-gap-16 u-flex-vertical-mobile"
      >
        <p class="upload-file-box-info body-text-2 u-normal">
          Max file size: 10MB
        </p>
        <button type="button" class="button is-secondary is-full-width-mobile">
          <span class="text">Choose a file</span>
        </button>
      </div>
      <ul
        class="upload-file-box-list u-min-width-0"
        id="file-details-area"
        style="display: none"
      >
        <li class="u-flex u-cross-center u-min-width-0">
          <span class="icon-document" aria-hidden="true"></span>
          <span
            class="upload-file-box-name u-trim u-min-width-0"
            id="file-name"
          >
          </span>
          <span
            class="upload-file-box-size u-margin-inline-start-4 u-margin-inline-end-16"
            id="file-size"
          >
          </span>
        </li>
      </ul>
    </div>
  </div>
</appwrite-upload-file>

<script>
  import { appwriteStorage } from "../lib/appwrite";
  import { ID } from "appwrite";

  const uploadHandler = async (file: any) => {
    let elm: any = document.getElementById("banner-image-id");
    let imgLoader: any = document.getElementById("upload-image-icon");
    let fileDetailsArea: any = document.getElementById("file-details-area");
    let fileName: any = document.getElementById("file-name");
    let fileSize: any = document.getElementById("file-size");
    elm.value = "";

    try {
      imgLoader.classList.add("loader");

      const result = await appwriteStorage.createFile(
        import.meta.env.PUBLIC_APPWRITE_BUCKET_ID,
        ID.unique(),
        file
      );
      console.log("result", result);
      fileDetailsArea.style.display = "block";
      fileName.innerText = result.name;
      fileSize.innerText = (result.sizeOriginal / 1024).toFixed(2) + " KB";
      elm.value = `${
        import.meta.env.PUBLIC_APPWRITE_ENDPOINT
      }/storage/buckets/${import.meta.env.PUBLIC_APPWRITE_BUCKET_ID}/files/${
        result.$id
      }/view?project=${import.meta.env.PUBLIC_APPWRITE_PROJECT_ID}`;
    } catch (err) {
      alert(err);
    } finally {
      imgLoader.classList.remove("loader");
    }
  };

  class AppwriteUploadFile extends HTMLElement {
    postId: string | undefined;
    isImageUploading: any;
    constructor() {
      super();
      this.postId = this.dataset.postid;

      const btnElem: HTMLButtonElement | null = this.querySelector("button");
      const fileInputElem: HTMLInputElement | null =
        this.querySelector("input");
      if (!btnElem) return;

      btnElem.addEventListener("click", async (e) => {
        e.preventDefault();
        if (fileInputElem) {
          fileInputElem.click();
        }
      });

      fileInputElem?.addEventListener("change", async (e: any) => {
        console.log(e.currentTarget?.files);
        if (e?.currentTarget?.files?.length) {
          uploadHandler(e?.currentTarget?.files[0]);
        }
      });
    }
  }
  customElements.define("appwrite-upload-file", AppwriteUploadFile);
</script>
